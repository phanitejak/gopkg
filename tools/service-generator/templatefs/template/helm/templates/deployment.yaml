apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{template "<<< .ServiceName >>>.name" .}}
  labels:
{{ include "<<< .ServiceName >>>.labels.standard" . | indent 4}}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
  {{ include "<<< .ServiceName >>>.app" . | indent 4}}
  {{ include "<<< .ServiceName >>>.release" . | indent 4}}
  template:
    metadata:
      labels:
    {{ include "<<< .ServiceName >>>.app" . | indent 4}}
    {{ include "<<< .ServiceName >>>.release" . | indent 4}}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.registry }}/{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        livenessProbe:
          httpGet:
            path: /status
            port: {{.Values.service.port}}
        readinessProbe:
          httpGet:
            path: /status
            port: {{.Values.service.port}}
        env:
        - name: HTTP_SERVER_ADDR
          value: ":{{.Values.service.port}}"
        - name: TRACING_ENABLED
          value: {{ .Values.tracing.enabled | quote }}
        - name: JAEGER_SERVICE_NAME
          value: {{ .Chart.Name | quote }}
        - name: JAEGER_ENDPOINT
          value: {{ .Values.tracing.collectorEndpoint | quote }}
        - name: JAEGER_SAMPLER_TYPE
          value: {{ .Values.tracing.samplerType | quote }}
        - name: JAEGER_SAMPLER_PARAM
          value: {{ .Values.tracing.samplerParameter | quote }}
        - name: JAEGER_REPORTER_LOG_SPANS
          value: {{ .Values.tracing.logSpans | quote }}
        <<<- if .UseKafkaConsumer >>>
        - name: KAFKA_BROKERS
          value: "{{.Values.env.kafkaBootstrapServer}}"
        - name: KAFKA_CONSUMER_TOPICS
          value: "{{.Values.env.kafkaConsumerTopic}}"
        - name: KAFKA_CONSUMER_GROUP
          value: "{{.Values.env.kafkaConsumerGroup}}"
        - name: KAFKA_CONSUMER_RETRY_ENABLED
          value: "{{.Values.env.kafkaRetryEnabled}}"
        - name: KAFKA_CONSUMER_RETRY_WAIT_TIMEOUT
          value: "{{.Values.env.kafkaRetryWaitTimeout}}"
        <<<- end >>>
        <<<- if .UseMySQL >>>
        - name: MARIADB_USERNAME
          value: "{{.Values.env.mariaDbUsername}}"
        - name: MARIADB_ADDRESS
          value: "{{.Values.env.mariaDbAddress}}"
        - name: MARIADB_DB_NAME
          value: "{{.Values.env.mariaDbName}}"
        - name: MARIADB_MAX_OPEN_CONNECTIONS
          value: "{{.Values.env.mariaDbMaxOpenConnections}}"
        - name: MARIADB_MAX_IDLE_CONNECTIONS
          value: "{{.Values.env.mariaDbMaxIdleConnections}}"
        - name: MARIADB_CONN_MAX_LIFETIME_SECONDS
          value: "{{.Values.env.mariaDbConnectionMaxLifetimeSeconds}}"
        - name: MARIADB_TLS_ENABLED
          value: "{{.Values.env.mariaDbTLSEnabled}}"
        <<<- end >>>
        <<<- if .UsePgSQL >>>
        - name: POSTGRES_USERNAME
          value: "{{.Values.env.postgresDbUsername}}"
        - name: POSTGRES_ADDRESS
          value: "{{.Values.env.postgresDbAddress}}"
        - name: POSTGRES_DB_NAME
          value: "{{.Values.env.postgresDbName}}"
        - name: POSTGRES_MAX_OPEN_CONNECTIONS
          value: "{{.Values.env.postgresDbMaxOpenConnections}}"
        - name: POSTGRES_MAX_IDLE_CONNECTIONS
          value: "{{.Values.env.postgresDbMaxIdleConnections}}"
        - name: POSTGRES_CONN_MAX_LIFETIME_SECONDS
          value: "{{.Values.env.postgresDbConnectionMaxLifetimeSeconds}}"
        - name: POSTGRES_TLS_ENABLED
          value: "{{.Values.env.postgresDbTLSEnabled}}"
        <<<- end >>>
        - name: LOGGING_LEVEL
          value: "{{.Values.env.loggingLevel}}"
        - name: POLLING_INTERVAL_SECS
          value: "{{.Values.env.pollingIntervalSecs}}"
        - name: ENTITY_NAME
          value: "{{ .Values.env.entityName }}"
        - name: APP_CREDENTIAL_PROVIDER_URL
          value: "{{ .Values.env.appCredentialProviderUrl }}"
        - name: DATABASE_TLS_ENABLED
          value: "{{ .Values.env.isTLSEnabled }}"
        resources:
{{ toYaml .Values.resources | indent 12 }}
      <<<- if .UseMySQL >>>
      initContainers:
      - name: create-db
        image: "{{ .Values.releaseRegistry }}/{{ .Values.image.dbRepository }}:{{ .Values.image.dbTag }}"
        env:
        - name: DB_ADDRESS
          value: "{{.Values.env.dbMasterAddress}}"
        - name: DB_NAMES
          value: {{.Values.env.dbServiceDatabase}}
        - name: DB_SERVICE_USER
          value: {{.Values.env.dbServiceUsername}}
        - name: DB_ADMIN_USER
          value: {{.Values.env.dbAdminUsername}}
        - name: ENTITY_NAME
          value: {{ .Values.env.entityName }}
        - name: APP_CREDENTIAL_PROVIDER_URL
          value: "{{ .Values.env.appCredentialProviderUrl }}"
        - name: IS_TLS_ENABLED
          value: "{{ .Values.env.isTLSEnabled }}"
        resources:
{{ toYaml .Values.resources | indent 12 }}
      - name: {{ .Chart.Name }}-migrate-db
        image: "{{ .Values.registry }}/{{ .Values.image.dbMigrationImage }}:{{ .Values.image.dbMigrationTag }}"
        env:
          - name: DB_TYPE
            value: "{{.Values.env.dbType}}"
          - name: DB_DSN
            value: "{{.Values.env.dbMasterAddress}}"
          - name: DB_NAME
            value: "{{.Values.env.dbServiceDatabase}}"
          - name: APP_CREDENTIAL_PROVIDER_URL
            value: "{{ .Values.env.appCredentialProviderUrl }}"
          - name: USERNAME
            value: "{{ .Values.env.dbServiceUsername}}"
          - name: ENTITY_NAME
            value: "{{ .Values.env.entityName}}"
          - name: IS_TLS_ENABLED
            value: "{{ .Values.env.isTLSEnabled }}"
          - name: SOURCE_URI
            value: "{{ .Values.env.dbSourceUri }}"
        resources:
{{ toYaml .Values.resources | indent 12 }}
      <<<- end >>>
      affinity:
{{ include "neohelperchart.anti-affinity-definitions" . | indent 8 }}
